# -*- coding: utf-8 -*-import arcpyclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "RMI Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(displayName="Input Feature Class",name="in_fc",datatype="DEFeatureClass",parameterType="Required",direction="Input")        param1 = arcpy.Parameter(displayName="Select State",name="state",datatype="Field",parameterType="Required",direction="Input")        param1.parameterDependencies = [param0.name]        param2 = arcpy.Parameter(displayName="Year1",name="Yr1",datatype="Field",parameterType="Required",direction="Input")        param2.parameterDependencies = [param1.name]        param3 = arcpy.Parameter(displayName="Year2",name="Yr2",datatype="Field",parameterType="Required",direction="Input")        param3.parameterDependencies = [param1.name]        param4 = arcpy.Parameter(displayName="RMI Field",name="RMI",datatype="GPString",parameterType="Required",direction="Input")        params = [param0, param1, param2, param3, param4]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return