# -*- coding: utf-8 -*-import arcpyclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = " My Second Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Rank Tool"        self.description = "Rank a numerical field from an input dataset and add a new rank field to the input feature class."        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(displayName="Input Feature Class",name="in_fc",datatype="DEFeatureClass",parameterType="Required",direction="Input")        param1 = arcpy.Parameter(displayName="Numerical Field to Rank",name="in_field",datatype="Field",parameterType="Required",direction="Input")        param1.parameterDependencies = [param0.name]        param2 = arcpy.Parameter(displayName="New Rank Field Name",name="out_field",datatype="GPString",parameterType="Required",direction="Input")        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        in_fc = parameters[0].valueAsText        in_field = parameters[1].valueAsText        out_field = parameters[2].valueAsText        arcpy.env.workspace = "C:\\Users\\Chima Okoli\\OneDrive\\Desktop\\GEOG592\\Lab7"        arcpy.env.overwriteOutput = True        #Cntyshp = 'Counties.shp'        #rankFile = open('rank.txt', 'w')              #Create an if not statement to add the field "rank1".        if not arcpy.ListFields(in_fc, out_field):            arcpy.AddField_management(in_fc, out_field, "SHORT")        recList = []           recNum = 0             with arcpy.da.SearchCursor(in_fc, [in_field]) as cursor:              for row in cursor:                recList.append([recNum, row[0], 0])                    recNum += 1        sortedRecList = sorted(recList, key = lambda x:x[1], reverse = True)         #Sort the ranking result        rank = 1        for aRec in sortedRecList:            aRec[2] = rank             rank += 1                regRecList = sorted(sortedRecList, key = lambda x:x[0])        with arcpy.da.UpdateCursor(in_fc, [out_field]) as cursor:            recNum = 0            for row in cursor:                row[-1] = regRecList[recNum][2]                recNum += 1                cursor.updateRow(row)        arcpy.AddMessage("Ranking complete.")                return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return