# -*- coding: utf-8 -*-import arcpyclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool_Q1,Tool_Q2,Tool_Q3,Tool_Q4,Tool_Q5]#Question 1        class Tool_Q1(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Health Monitor Tool"        self.description = "To diagnose a person's weight"        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(displayName = "Weight in pounds (lbs)", name = "wt", datatype = "GPString", parameterType = "Required", direction = "Input")        param1 = arcpy.Parameter(displayName = "Height in feet (ft)", name = "ft", datatype = "GPString", parameterType = "Required", direction = "Input")        params = [param0, param1]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        #height = float(input("Please enter your heigh (in feet):"))        height = float(parameters[1].ValueAsText)        #weight = float(input("Please enter your weight (in lbs):"))        weight = float(parameters[0].ValueAsText)        sw = ((height*30.48)-105)/0.454        if weight<sw*0.9:            myWeight = "underweight"        elif sw*0.9<=weight<=sw*1.1:            myWeight = "normal weight"        elif sw*1.1<weight<=sw*1.2:            myWeight = "overweight"        elif sw*1.2<weight<=sw*1.3:            myWeight = "Class I Obesity"        elif sw*1.3<weight<=sw*1.4:            myWeight = "Class II Obesity"        elif sw*1.4<weight:            myWeight = "Class III Obesity"        arcpy.AddMessage("The standard weight value is ")        arcpy.AddMessage("%.3f" % sw)        arcpy.AddMessage("You are " myWeight)        #arcpy.AddMessage(myWeight)        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return# Question 2class Tool_Q2(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Degree Convertor Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = None        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return# Question 3class Tool_Q3(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Best Location Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = None        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return# Question 4class Tool_Q4(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Highway Analysis Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = None        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return# Question 5class Tool_Q5(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Suitability Analysis Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = None        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return